name: deer-deploy-nodejs-pnpm

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      application:
        required: true
        type: string
      profile:
        required: true
        type: string
      s3_bucket_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  SNS_TOPIC_ARN_SLACK_ALERT: ${{ (inputs.profile == 'prod' || inputs.profile == 'production') && vars.SNS_TOPIC_ARN_SLACK_ALERT_PROD || vars.SNS_TOPIC_ARN_SLACK_ALERT_STAGING }}
  SLACK_ALERT_CHANNEL_ID: ${{ (inputs.profile == 'prod' || inputs.profile == 'production') && vars.SLACK_DEPLOY_CHANNEL_ID_PROD || vars.SLACK_DEPLOY_CHANNEL_ID_STAGING }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Get commit message
        id: get_commit_message
        run: |
          commit_message=$(curl --fail -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/commits | \
              jq -c '.[] | select(.sha | contains("${{ github.sha }}"))' | \
              jq '.commit.message' | \
              sed 's/^"\(.*\)"$/\1/g' | \
              tr -d '\n')
          message=${commit_message:0:100} # 100자 제한
          echo "received commit message='$commit_message'"
          echo "message=$message" >> $GITHUB_OUTPUT

      - name: Set Meta Message
        run: |
          ACTIONS_META='*<${{ github.server_url }}/${{ github.repository }} | [${{ inputs.application }}]>* to *[${{ inputs.profile }}]* by ${{ github.actor }}. \n:package: <https://ap-northeast-2.console.aws.amazon.com/codesuite/codedeploy/applications/${{ inputs.service }}-${{ inputs.profile }}/deployment-groups/${{ inputs.application }} | CodeDeploy> \n:github: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} | Github Actions> \n:tag: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }} | ${{ steps.get_commit_message.outputs.message }}>'
          echo "ACTIONS_META=$ACTIONS_META" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy Alert to Slack
        if: ${{ success() }}
        run: |
          aws sns publish --topic-arn ${{ env.SNS_TOPIC_ARN_SLACK_ALERT }} --message '{
            "channel": "${{ env.SLACK_ALERT_CHANNEL_ID }}",
            "text": ":mega: 빌드 시작 ${{ env.ACTIONS_META }}"
          }'
          echo "Alerted to slack"

      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install
        shell: bash

      - name: Generate environment file
        run: node infra/scripts/print-env.js /${{ inputs.application }}/${{ inputs.profile }} > .env
        shell: bash

      - name: Build
        run: pnpm build-to-deploy
        shell: bash

      - name: Prepare Installing production dependencies
        run: rm -rf node_modules && echo 'symlink=false' >> .npmrc && echo 'node-linker=hoisted' >> .npmrc
        shell: bash

      - name: Install production dependencies
        run: pnpm install --prod --shamefully-hoist
        shell: bash

      - name: Make zip file
        run: zip --symlinks -r ./${{ github.sha }}.zip . > /dev/null
        shell: bash

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./${{ github.sha }}.zip s3://${{ inputs.s3_bucket_name }}/${{ inputs.application }}/${{ inputs.profile }}/${{ github.sha }}.zip

      - name: Code Deploy
        run: >
          aws deploy create-deployment
          --application-name ${{ inputs.service }}-${{ inputs.profile == 'production' && 'prod' || inputs.profile }}
          --deployment-group-name ${{ inputs.application }}
          --s3-location bucket=${{ inputs.s3_bucket_name }},bundleType=zip,key=${{ inputs.application }}/${{ inputs.profile }}/${{ github.sha }}.zip

      - name: Build Fail Alert to Slack
        if: ${{ failure() || cancelled() }}
        run: |
          aws sns publish --topic-arn ${{ env.SNS_TOPIC_ARN_SLACK_ALERT }} --message '{
            "channel": "${{ env.SLACK_ALERT_CHANNEL_ID }}",
            "text": ":x: 빌드 실패 ${{ env.ACTIONS_META }}"
          }'
          echo "Alerted to slack"
